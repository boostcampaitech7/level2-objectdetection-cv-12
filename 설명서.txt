#inference 양식

python main.py \
    --train 0 \
    --config_dir /data/ephemeral/home/Lv2.Object_Detection/level2-objectdetection-cv-12/level2-objectdetection-cv-01-main/mmdetection/custom_config/recycle_dino-5scale_swin-l_8xb2-6e_coco.py \
    --load_from /data/ephemeral/home/Lv2.Object_Detection/level2-objectdetection-cv-12/level2-objectdetection-cv-01-main/mmdetection/work_dirs/recycle_dino-5scale_swin-l_8xb2-6e_coco/epoch_5.pth \

# train 양식

python main.py \
    --train 1 \
    --config_dir /data/ephemeral/home/Lv2.Object_Detection/baseline/mmdetection/custom_configs/DINO/dino-5scale_trash_YJH_BASICAUG_TTA_HYPERPARAM_FPN_IMGSCALE(fix_meanstd).py \
    --wandb_name DINO_MESNSTD_JIHWAN \
    --amp

# 이어서 학습하기 양식

python main.py \
    --train 1 \
    --config_dir /data/ephemeral/home/Lv2.Object_Detection/level2-objectdetection-cv-12/level2-objectdetection-cv-01-main/mmdetection/custom_config/recycle_dino-5scale_swin-l_8xb2-6e_coco.py \
    --wandb_name DINO_MIMIC_JIHWAN(start5) \
    --amp \
    --resume_from /data/ephemeral/home/Lv2.Object_Detection/level2-objectdetection-cv-12/level2-objectdetection-cv-01-main/mmdetection/work_dirs/recycle_dino-5scale_swin-l_8xb2-6e_coco/epoch_5.pth


# nohup 으로 백그라운드에서 실행하기 양식

nohup python main.py \
    --train 1 \
    --config_dir /data/ephemeral/home/Lv2.Object_Detection/baseline/mmdetection/custom_configs/DINO/dino-5scale_swin-l_8xb2-12e_trash_yjh_BASICAUG_TTA_HYPERPARAM.py \
    --wandb_name DINO_BASICAUG_HP_TTA_JIHWAN \
    --amp > output.log 2>&1 &

# output log 확인하기

tail -f output.log



nohup python main.py \
    --config_dir /data/ephemeral/home/Lv2.Object_Detection/baseline/mmdetection/custom_configs/ATSS/atss_YJH.py \
    --wandb_name ATSS_TEST_JIHWAN \
    --train 1 \
    --amp > output.log 2>&1 &



# 학습 명령 예시
'''
인자 설명
--config_dir: 설정 파일의 경로를 지정합니다.
--wandb_name: W&B에서 실험을 추적하기 위한 이름을 지정합니다.
--train 1: 학습 모드로 설정합니다.
--amp: AMP를 사용하여 학습 속도를 향상시킵니다 (선택 사항).
--root: 데이터셋의 루트 디렉토리를 지정합니다.
--annotation: 학습에 사용할 train.json 파일의 경로를 지정합니다.
--valid_annotation: 검증에 사용할 val.json 파일의 경로를 지정합니다.
--output: 학습 결과를 저장할 디렉토리를 지정합니다.
주의사항
--wandb_name은 필수 인자이며, W&B를 사용하지 않더라도 빈 문자열이라도 지정해야 합니다.
--amp는 선택 사항이며, 시스템에서 AMP를 지원하지 않을 경우 제외해야 합니다.
--output을 지정하지 않으면 기본적으로 ./work_dirs/{config 파일 이름} 경로가 사용됩니다.
'''

python main.py \
    --config_dir /data/ephemeral/home/Lv2.Object_Detection/baseline/mmdetection/custom_configs/ATSS/atss_YJH.py \
    --wandb_name ATSS_TEST \
    --train 1 \
    --amp \
    --root /data/ephemeral/home/Lv2.Object_Detection/test_dir/2 \
    --annotation /data/ephemeral/home/Lv2.Object_Detection/test_dir/2/train.json \
    --valid_annotation /data/ephemeral/home/Lv2.Object_Detection/test_dir/2/val.json \
    #--output /path/to/output/directory


# 추론 명령 예시

'''
인자 설명
--train 0: 추론 모드로 설정합니다.
--checkpoint: 추론에 사용할 체크포인트 파일의 이름을 지정합니다. 예를 들어, epoch_12 또는 best_checkpoint 등으로 지정할 수 있습니다.
--root: 테스트 데이터가 있는 루트 디렉토리를 지정합니다.
--annotation: 테스트용 test.json 파일의 경로를 지정합니다.
--output: 추론 결과를 저장할 파일의 경로를 지정합니다. SubmissionHook이 활성화되어 있으므로 CSV 파일로 저장됩니다.

'''

python main.py \
    --config_dir /path/to/your/config.py \
    --train 0 \
    --checkpoint best_checkpoint \
    --root /data/ephemeral/home/Lv2.Object_Detection/dataset \
    --annotation /data/ephemeral/home/Lv2.Object_Detection/dataset/test.json \
    #--output /path/to/output/submission.csv
